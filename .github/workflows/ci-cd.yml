name: CI/CD Pipeline

# Controls when the workflow will run
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11'] # Use the Python version specified in Dockerfile

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python environment
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-program-options-dev libboost-system-dev libboost-thread-dev zlib1g-dev libeigen3-dev libboost-test-dev

      # Install dependencies
      # Consider caching dependencies to speed up workflows
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Potentially install CAMeL tools data here if needed for tests
          camel_data -i ner-arabert

      # Run tests using pytest
      # Add coverage reporting if configured
      - name: Run tests with pytest
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          TELEGRAM_BOT_TOKEN: dummy_token
          TELEGRAM_API_ID: 123456
          TELEGRAM_API_HASH: dummy_hash
          TELEGRAM_GROUP_IDS: "[123,456]"
          TELEGRAM_PHONE_NUMBER: "+1234567890"
        run: |
          pytest --cov=app --cov-report=xml

      # Optional: Upload coverage report artifact
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true

  build-and-push:
    # This job runs only after the test job succeeds
    needs: test
    # Only run this job on pushes to the main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write # Needed to push to GitHub Container Registry

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Docker Buildx for advanced build capabilities
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          # Deploy API service
          railway up \
            --service tariqi-api \
            --environment production \
            --detach

          # Deploy scheduler service
          railway up \
            --service tariqi-scheduler \
            --environment production \
            --detach 